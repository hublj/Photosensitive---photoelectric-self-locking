#include <STC8G.h>
#include <intrins.h>
//光敏低电平控制自锁控制输出，高电平受控，有一个BUG，必须要有上升沿和下降沿才能正常工作
// 延时函数
void delay(unsigned int ms) {
    unsigned int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 123; j++);
    }
}

// 初始化GPIO
void GPIO_Init(void) {
    // 设置P5.4为标准双向口
    P5M1 &= ~0x10;
    P5M0 &= ~0x10;
    // 设置P5.5为标准双向口
    P5M1 &= ~0x20;
    P5M0 &= ~0x20;
    // 设置P3.3为输出模式
    P3M1 &= ~0x08;
    P3M0 &= ~0x08;

    P33 = 0; // 默认设置P3.3为低电平，继电器关闭
}

// 控制继电器开
void Relay_On(void) {
    P33 = 1;
}

// 控制继电器关
void Relay_Off(void) {
    P33 = 0;
}

// 继电器状态标志
bit relay_state = 0;
// P5.5 状态标志
bit p55_state = 0;
// P5.5 触发计时标志
bit p55_counting = 0;
// P5.5 计时
unsigned int p55_timer = 0;
// P5.4 控制是否有效标志
bit p54_control_valid = 0;

// 检查光电开关状态并控制继电器
void Check_Sensor(void) {
    bit current_p54_state;
    bit current_p55_state = (P5 & 0x20)? 1 : 0;
    static bit last_p54_state = 1;

    if (!p55_counting) {
        if (current_p55_state!= p55_state) {
            p55_counting = 1;
            p55_timer = 0;
            p55_state = current_p55_state;
        }
    } else {
        p55_timer++;
        if (p55_timer >= 500) { // 10s, 20ms * 500 = 10s
            p55_counting = 0;
            p54_control_valid = 1;
        }
    }

    if (current_p55_state) {
        p54_control_valid = 0;
        Relay_Off();
    }

    if (p54_control_valid) {
        current_p54_state = (P5 & 0x10)? 1 : 0;
        if (current_p54_state!= last_p54_state) {
            delay(20);
            current_p54_state = (P5 & 0x10)? 1 : 0;
            if (current_p54_state!= last_p54_state) {
                if (current_p54_state == 0 &&!relay_state) {
                    Relay_On();
                    relay_state = 1;
                } else if (current_p54_state == 0 && relay_state) {
                    Relay_Off();
                    relay_state = 0;
                }
                last_p54_state = current_p54_state;
            }
        }
    }
}

// 主函数
void main(void) {
    GPIO_Init();
    while (1) {
        Check_Sensor();
        _nop_();
    }
}
