#include <STC8G.h>
#include <intrins.h>
//光敏自锁低电平受控10秒高电平触发
// 定义1ms延时函数
void delay_1ms() {
    unsigned char i, j;
    _nop_();
    i = 12;
    j = 169;
    do {
        while (--j);
    } while (--i);
}

// 初始化GPIO
void GPIO_Init(void) {
    // 设置P5.4为标准双向口
    P5M1 &= ~0x10;
    P5M0 &= ~0x10;
    // 设置P5.5为标准双向口
    P5M1 &= ~0x20;
    P5M0 &= ~0x20;
    // 设置P3.3为输出模式
    P3M1 &= ~0x08;
    P3M0 &= ~0x08;

    P33 = 0; // 默认设置P3.3为低电平，继电器关闭
}

// 控制继电器开
void Relay_On(void) {
    P33 = 1;
}

// 控制继电器关
void Relay_Off(void) {
    P33 = 0;
}

// 继电器状态标志
bit relay_state = 0;
// P5.5 状态标志
bit p55_state = 0;
// P5.5 触发计时标志
bit p55_counting = 0;
// P5.5 计时（单位：ms）
unsigned int p55_timer = 0;
// P5.4 控制是否有效标志
bit p54_control_valid = 0;

// 检查光电开关状态并控制继电器
void Check_Sensor(void) {
    bit current_p54_state;
    bit current_p55_state = (P5 & 0x20)? 1 : 0;
    // 修改点1：将初始状态设为0，因为现在是高电平控制
    static bit last_p54_state = 0; 

    // 检测P5.5状态变化
    if (current_p55_state!= p55_state) {
        p55_counting = 1;
        p55_timer = 0;
        p55_state = current_p55_state;
    }

    // 开始计时
    if (p55_counting) {
        delay_1ms(); // 每调用一次该函数，延时1ms
        p55_timer++;
        if (p55_timer >= 10000) { // 10s, 1ms * 10000 = 10s
            p55_counting = 0;
            if (current_p55_state == 1) {
                p54_control_valid = 1;
            } else {
                p54_control_valid = 0;
                Relay_Off();
            }
        }
    }

    // 根据P5.4状态控制继电器
    if (p54_control_valid) {
        current_p54_state = (P5 & 0x10)? 1 : 0;
        if (current_p54_state!= last_p54_state) {
            delay_1ms();
            delay_1ms(); // 消抖延时2ms
            current_p54_state = (P5 & 0x10)? 1 : 0;
            if (current_p54_state!= last_p54_state) {
                // 修改点2：将判断条件改为current_p54_state == 1，实现高电平控制
                if (current_p54_state == 1 &&!relay_state) { 
                    Relay_On();
                    relay_state = 1;
                } 
                // 修改点3：将判断条件改为current_p54_state == 1，实现高电平控制
                else if (current_p54_state == 1 && relay_state) { 
                    Relay_Off();
                    relay_state = 0;
                }
                last_p54_state = current_p54_state;
            }
        }
    }
}

// 主函数
void main(void) {
    GPIO_Init();
    while (1) {
        Check_Sensor();
    }
}
