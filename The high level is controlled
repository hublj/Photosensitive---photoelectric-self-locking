#include <STC8G.h>
#include <intrins.h>
//高电平受控
// 延时函数
void delay(unsigned int ms) {
    unsigned int i, j;
    for (i = 0; i < ms; i++) {
        for (j = 0; j < 123; j++);
    }
}

// 初始化GPIO
void GPIO_Init(void) {
    // 设置P5.4为标准双向口
    P5M1 &= ~0x10;
    P5M0 &= ~0x10;
    // 设置P5.5为标准双向口
    P5M1 &= ~0x20;
    P5M0 &= ~0x20;
    // 设置P3.3为输出模式
    P3M1 &= ~0x08;
    P3M0 &= ~0x08;

    P33 = 0; // 默认设置P3.3为低电平，继电器关闭
}

// 控制继电器开
void Relay_On(void) {
    P33 = 1;
}

// 控制继电器关
void Relay_Off(void) {
    P33 = 0;
}

// 继电器状态标志
unsigned char relay_state = 0; 
// P5.5 状态标志
unsigned char p55_state = 0; 
// P5.5 触发计时标志
unsigned char p55_counting = 0; 
// P5.5 计时
unsigned int p55_timer = 0; 
// P5.4 控制是否有效标志
unsigned char p54_control_valid = 0; 
// 记录P5.5的初始状态
unsigned char startup_p55_state = 0;

// 检查光电开关状态并控制继电器
void Check_Sensor(void) {
    unsigned char current_p54_state;
    unsigned char current_p55_state = (P5 & 0x20)? 1 : 0;
    static unsigned char last_p54_state = 1;

    if (!p55_counting) {
        p55_counting = 1;
        p55_timer = 0;
        p55_state = current_p55_state;
    } else {
        p55_timer++;
        if (p55_timer >= 500) { // 10s, 20ms * 500 = 10s
            p55_counting = 0;
            p54_control_valid = 1;
        }
    }

    if (current_p55_state) {
        p54_control_valid = 0;
        Relay_Off();
    }

    if (p54_control_valid) {
        current_p54_state = (P5 & 0x10)? 1 : 0;
        if (current_p54_state!= last_p54_state) {
            delay(20);
            current_p54_state = (P5 & 0x10)? 1 : 0;
            if (current_p54_state!= last_p54_state) {
                if (current_p54_state == 0 &&!relay_state) {
                    Relay_On();
                    relay_state = 1;
                } else if (current_p54_state == 0 && relay_state) {
                    Relay_Off();
                    relay_state = 0;
                }
                last_p54_state = current_p54_state;
            }
        }
    }
}

// 主函数
void main(void) {
    GPIO_Init();
    // 启动时直接检测P5.5电平
    startup_p55_state = (P5 & 0x20)? 1 : 0;
    if (startup_p55_state) {
        p54_control_valid = 0;
    } else {
        p55_counting = 1;
        p55_timer = 0;
    }
    while (1) {
        Check_Sensor();
        _nop_();
    }
}

/*
在 GPIO_Init 函数中，对 P5.4、P5.5 进行端口模式配置，并将 P3.3 配置为输出模式，同时将 P3.3 初始化为低电平，即关闭继电器。
Relay_On 和 Relay_Off 函数分别用于控制继电器的开和关，通过将 P3.3 置为高电平或低电平实现。
在 Check_Sensor 函数中，首先检测 p55_counting 标志，如果未开始计数，开始计数并更新 p55_state；如果正在计数，当达到 10 秒时，将 p54_control_valid 置为 1 表示 P5.4 可以控制继电器。根据 P5.5 的电平状态，会控制 p54_control_valid 标志和继电器的状态。对于 P5.4 的状态检测，加入了去抖动逻辑，通过 delay 函数和多次读取 P5.4 的状态进行去抖动处理。
在 main 函数中，首先进行 GPIO 初始化，然后读取 P5.5 的初始状态存储在 startup_p55_state 中，根据该状态进行相应的控制有效性和计数标志的设置，之后进入主循环，不断调用 Check_Sensor 函数并执行空操作。
*/
